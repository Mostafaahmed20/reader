{"version":3,"sources":["booklist.js","App.js","serviceWorker.js","index.js"],"names":["Booklist","props","ubdatequery","query","setState","trim","clearquery","state","value","word","this","onsale","open","ondeletebtn","library","match","RegExp","escapestringregexp","filter","book","test","name","type","onChange","e","target","placeholder","className","length","onClick","map","key","id","style","backgroundImage","Avatar","size","activeColor","Writer","pricebefore","priceafter","Component","App","sale","SALE","removebtn","bookone","c","contact","val","changestatues","changesale","fetch","then","data","json","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.54292dd8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport escapestringregexp from \"escape-string-regexp\";\r\nimport BeautyStars from \"beauty-stars\";\r\nexport default class Booklist extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      query: \"\",\r\n      value: 0,\r\n    };\r\n  }\r\n  ubdatequery = (query) => {\r\n    this.setState({\r\n      query: query.trim(),\r\n    });\r\n  };\r\n  clearquery = () => {\r\n    this.setState({\r\n      query: \"\",\r\n    });\r\n  };\r\n  render() {\r\n    const { onsale, open, ondeletebtn, library } = this.props;\r\n    const { query } = this.state;\r\n\r\n    let word;\r\n    if (query) {\r\n      const match = new RegExp(escapestringregexp(query, \" i\"));\r\n      word = library.filter((book) => match.test(book.name));\r\n    } else {\r\n      word = library;\r\n    }\r\n    return (\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          onChange={(e) => this.ubdatequery(e.target.value)}\r\n          value={this.state.query}\r\n          placeholder=\"Search for By Name\"\r\n          className=\"search\"\r\n        />\r\n        {word.length !== library.length && (\r\n          <div>\r\n            <span className=\"showing\">\r\n              showing {word.length} of {library.length}\r\n            </span>\r\n            <button onClick={this.clearquery} className=\"showingbtn\">\r\n              {\" \"}\r\n              SHOW ALL\r\n            </button>\r\n            ;\r\n          </div>\r\n        )}\r\n        {open ? (\r\n          word.map((book) => (\r\n            <section key={book.id} className=\"book-list\">\r\n              <div\r\n                style={{ backgroundImage: `url(${book.Avatar})` }}\r\n                className=\"myimage\"\r\n              ></div>\r\n              <BeautyStars\r\n                className=\"rating\"\r\n                value={this.state.value}\r\n                size={\"20px\"}\r\n                activeColor={\"red\"}\r\n                onChange={(value) => this.setState({ value })}\r\n              />\r\n              <h3 className=\"sale\">{onsale ? \"SalE!\" : \"\"}</h3>\r\n              <h3 className=\"bookname\">{book.name}</h3>\r\n              <small className=\"bookwriter\">{book.Writer}</small>\r\n              <h4 className=\"before\"> {book.pricebefore} </h4>\r\n              <h4>{book.priceafter}</h4>\r\n              <button className=\"MOREDETILS\"> MORE DETAILS...</button>\r\n              <br /> <br />\r\n              <br />\r\n              <br />\r\n              <button className=\"ADDTOCART\">\r\n                ADD TO CART\r\n                <br />\r\n                <input type=\"number\" placeholder=\"1\" className=\"qty\" />\r\n                <br />\r\n                <button className=\"checkout\">proceed to checkout</button>\r\n                <button onClick={() => ondeletebtn(book)}>Remove</button>\r\n              </button>\r\n              <hr />\r\n            </section>\r\n          ))\r\n        ) : (\r\n          <h3>we are closed</h3>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Booklist from './booklist'\r\nexport default class App extends Component {\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then((data) => data.json())\r\n      .then((data) => this.setState({ data: data.id}));\r\n  }\r\n  state = {\r\n    sale: true,\r\n    open: true,\r\n    library: [\r\n      {\r\n        id: \"one\",\r\n        name: \"Book to Die For\",\r\n        Writer: \"Agatha Christie\",\r\n        pricebefore: \"€17.00\",\r\n        priceafter: \"€11.00\",\r\n        SALE: \"!PRODUCT ON SALE\",\r\n        Avatar:\r\n          \"https://themedemos.webmandesign.eu/angelica/wp-content/uploads/sites/24/WMDEMO__canva-13-240x383.jpg\",\r\n      },\r\n\r\n      {\r\n        id: \"two\",\r\n        name: \"Replied As Even Let\",\r\n        Writer: \"Alexander Dumas\",\r\n        pricebefore: \"€17.00 \",\r\n        priceafter: \"€13.00\",\r\n        SALE: \"!PRODUCT ON SALE\",\r\n        Avatar:\r\n          \"https://themedemos.webmandesign.eu/angelica/wp-content/uploads/sites/24/WMDEMO__canva-10-240x383.jpg\",\r\n      },\r\n\r\n      {\r\n        id: \"three\",\r\n        name: \"Charles Dickens\",\r\n        Writer: \"Alexander Dumas\",\r\n        pricebefore: \" €13.00\",\r\n        priceafter: \"€11.00\",\r\n        SALE: \"!PRODUCT ON SALE\",\r\n        Avatar:\r\n          \"https://themedemos.webmandesign.eu/angelica/wp-content/uploads/sites/24/WMDEMO__canva-15-240x383.jpg\",\r\n      },\r\n    ],\r\n  };\r\n\r\n      removebtn = (bookone) => {\r\n          this.setState = ({\r\n              library: this.state.library.filter((c) =>  c.id !== bookone )\r\n          })\r\n  }\r\n\r\n  removebtn = (contact) => {\r\n    this.setState({\r\n      library: this.state.library.filter((val) => {\r\n        return val.id !== contact.id;\r\n      }),\r\n    });\r\n  };\r\n\r\n  changestatues = () => {\r\n    this.setState({\r\n      open: !this.state.open,\r\n    });\r\n  };\r\n  changesale = () => {\r\n    this.setState({\r\n      sale: !this.state.sale,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* <button onClick={this.changestatues}>changestatues</button> */}\r\n        <button onClick={this.changesale}>Sale today</button>\r\n        <Booklist\r\n          ondeletebtn={this.removebtn}\r\n          library={this.state.library}\r\n          onsale={this.state.sale}\r\n          open={this.state.open}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}